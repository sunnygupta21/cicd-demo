AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  License: Apache-2.0
Description: 'AWS CloudFormation Sample Template EC2_Instance_With_Ephemeral_Drives:
  Example to show how to attach ephemeral drives using EC2 block device mappings.
  **WARNING** This template creates an Amazon EC2 instance. You will be billed for
  the AWS resources used if you create a stack from this template.'
Parameters:
  KeyName:
    Default: myapp
    Description: Name of an existing EC2 KeyPair to enable SSH access to the web server
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: m4.large
    ConstraintDescription: must be a valid EC2 instance type.
  ImageId:
    Description: AMI Image ID
    Type: String
    Default: ami-467ca739
    ConstraintDescription: must be a valid AMI IMAGE ID.
  SSHLocation:
    Description: Lockdown SSH access to the bastion host (default can be accessed
      from anywhere)
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref 'KeyName'
      InstanceType: !Ref 'InstanceType'
      ImageId: !Ref 'ImageId'
      SecurityGroups: [!Ref 'EC2SecurityGroup']
      UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            yum update -y
            yum install docker -y && service docker start && chkconfig docker on
            docker run -d -p 8000:8000 sunnypabba/hellonode:latest
      BlockDeviceMappings:
      - DeviceName: /dev/sdc
        VirtualName: ephemeral0
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH access
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref 'SSHLocation'
      - IpProtocol: tcp
        FromPort: '8000'
        ToPort: '8000'
        CidrIp: !Ref 'SSHLocation'
Outputs:
  Instance:
    Value: !GetAtt [EC2Instance, PublicDnsName]
    Description: DNS Name of the newly created EC2 instance
